<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="STR_COMMAND_BYE" xml:space="preserve">
    <value>Bye!</value>
  </data>
  <data name="STR_COMMAND_CHECK_RECLIST_DESC" xml:space="preserve">
    <value>Check reclist</value>
  </data>
  <data name="STR_COMMAND_CHECK_RECLIST_EXAMPLE1" xml:space="preserve">
    <value>check_reclist "%Reclist name%"</value>
  </data>
  <data name="STR_COMMAND_CHECK_RECLIST_EXAMPLE2" xml:space="preserve">
    <value>check_reclist "CVC RUS"</value>
  </data>
  <data name="STR_COMMAND_CHECK_RECLIST_FINISH" xml:space="preserve">
    <value>Reclist check finished.</value>
  </data>
  <data name="STR_COMMAND_CHECK_RECLIST_LOADED" xml:space="preserve">
    <value>Reclist loaded succesfully.</value>
  </data>
  <data name="STR_COMMAND_CHECK_RECLIST_MASK_CANT_READ_YAML" xml:space="preserve">
    <value>Failed to read mask file. Check YAML syntax.</value>
  </data>
  <data name="STR_COMMAND_CHECK_RECLIST_MASK_IS_MISSING" xml:space="preserve">
    <value>No mask file found. It's not an error. All possible aliases will be generated from all positions.</value>
  </data>
  <data name="STR_COMMAND_CHECK_RECLIST_MASK_IS_OK" xml:space="preserve">
    <value>Mask loaded successfully.</value>
  </data>
  <data name="STR_COMMAND_CHECK_RECLIST_WTR_IS_MISSING" xml:space="preserve">
    <value>No WTR file found. It's not an error. Default alias style will be applied</value>
  </data>
  <data name="STR_COMMAND_CHECK_RECLIST_WTR_IS_OK" xml:space="preserve">
    <value>Found WTR file.</value>
  </data>
  <data name="STR_COMMAND_ERROR_CANT_READ_RECLIST" xml:space="preserve">
    <value>YAML is correct, but reclist loading failed. Contact the developer.</value>
  </data>
  <data name="STR_COMMAND_ERROR_CANT_READ_YAML" xml:space="preserve">
    <value>Failed to read file. Check YAML syntax.</value>
  </data>
  <data name="STR_COMMAND_ERROR_FILE_ALREADY_EXISTS" xml:space="preserve">
    <value>File '{0}' already exists!</value>
  </data>
  <data name="STR_COMMAND_ERROR_FILE_NOT_EXISTS" xml:space="preserve">
    <value>File '{0}' doesn't exist!</value>
  </data>
  <data name="STR_COMMAND_ERROR_RECLIST_ALREADY_EXISTS" xml:space="preserve">
    <value>Reclist '{0}' already exists!</value>
  </data>
  <data name="STR_COMMAND_ERROR_RECLIST_NOT_EXISTS" xml:space="preserve">
    <value>Reclist '{0}' doesn't exist!</value>
  </data>
  <data name="STR_COMMAND_ERROR_WRONG_ARGS_COUNT" xml:space="preserve">
    <value>Wrong arguments count!</value>
  </data>
  <data name="STR_COMMAND_EXIT_DESC" xml:space="preserve">
    <value>Exit helper</value>
  </data>
  <data name="STR_COMMAND_FAILED" xml:space="preserve">
    <value>Command failed.</value>
  </data>
  <data name="STR_COMMAND_HELLO" xml:space="preserve">
    <value>Hello! Welcome to WavConfigHelper. Type 'help' to get commands list, or 'exit' to exit.</value>
  </data>
  <data name="STR_COMMAND_HELP_DESC" xml:space="preserve">
    <value>Get command list</value>
  </data>
  <data name="STR_COMMAND_IMPORT_PROJECT_DESC" xml:space="preserve">
    <value>Import 0.1 WavConfigTool project</value>
  </data>
  <data name="STR_COMMAND_IMPORT_PROJECT_EXAMPLE1" xml:space="preserve">
    <value>import_project %project file% %Reclist name in new version% %output filename%</value>
  </data>
  <data name="STR_COMMAND_IMPORT_PROJECT_EXAMPLE2" xml:space="preserve">
    <value>import_project "C:\voicebank.wconfig" "CVC RUS" "C:\voicebank.wsp"</value>
  </data>
  <data name="STR_COMMAND_IMPORT_RECLIST_DESC" xml:space="preserve">
    <value>Import .wsettings to .reclist</value>
  </data>
  <data name="STR_COMMAND_IMPORT_RECLIST_EXAMPLE1" xml:space="preserve">
    <value>import_reclist %wsettings name% %output reclist name%</value>
  </data>
  <data name="STR_COMMAND_IMPORT_RECLIST_EXAMPLE2" xml:space="preserve">
    <value>import_reclist "C:\vccv_eng.wsettings" "VCCV English"</value>
  </data>
  <data name="STR_COMMAND_SUCCESS" xml:space="preserve">
    <value>Command succeeded.</value>
  </data>
  <data name="STR_EXAMPLE" xml:space="preserve">
    <value>Examples:</value>
  </data>
  <data name="STR_UNKNOWN_COMMAND" xml:space="preserve">
    <value>Unknown command '{0}'</value>
  </data>
</root>